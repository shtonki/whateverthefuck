<?xml version="1.0"?>
<doc>
    <assembly>
        <name>whateverthefuck</name>
    </assembly>
    <members>
        <member name="T:whateverthefuck.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:whateverthefuck.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:whateverthefuck.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:whateverthefuck.Properties.Resources.ability_fireball">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:whateverthefuck.Properties.Resources.kappa">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.control.Hotkeys">
            <summary>
            A collection of HotkeyMappings.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.control.Hotkeys.LookupHotkey(whateverthefuck.src.control.InputUnion)">
            <summary>
            Looks up an input and returns the corresponding GameAction.
            </summary>
            <param name="input">The InputUnion to lookup.</param>
            <returns>The corresponding GameAction if input is mapped, GameAction.Undefined otherwise.</returns>
        </member>
        <member name="T:whateverthefuck.src.control.HotkeyMapping">
            <summary>
            A class which maps an InputUnion to a GameAction.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.control.InputUnion">
            <summary>
            This class is fucked.
            It is used to represent any possible input action the user may take.
            This includes mouse moving, buttons being pressed, mouse buttons being pressed, scroll wheel being spinned.
            It saved everything in one uninherited class for "ease of use".
            Have fun.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.control.InputUnion.Key">
            <summary>
            Gets the Key being pressedor, or null if the InputUnion is not a keyboard input.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.control.InputUnion.MouseButton">
            <summary>
            Gets the MouseButton being pressed, or null if the InputUnion is not a mouse input.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.control.InputUnion.Location">
            <summary>
            Gets the location of the mouse event.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.control.InputUnion.PreviousLocation">
            <summary>
            Gets the location of where the mouse moved from, or null if the InputUnion is not a mouse move event.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.control.InputUnion.Equals(whateverthefuck.src.control.InputUnion)">
            <summary>
            Checks the equality of two InputUnions. They are equal if and only if the represent the same keyboard key or mouse button being pressed in the same direction.
            </summary>
            <param name="other">The InputUnion with which to check for equality.</param>
            <returns>True if the compared InputEvent represents the same button or key being pressed, false otherwise.</returns>
        </member>
        <member name="M:whateverthefuck.src.model.Ability.Cast(whateverthefuck.src.model.GameEntity)">
            <summary>
            Used when a Character finishes the casting time of an Ability and the effect of the spell is to take place.
            </summary>
            <param name="caster">The GameEntity which cast the ability.</param>
            <returns>The event which creates the Projectile if there should be one, null otherwise.</returns>
        </member>
        <member name="T:whateverthefuck.src.model.ClientGameStateManager">
            <summary>
            Handles the client side Game State. Is responsible for handling incoming GameEvents and requesting GameEvents on the server side.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.ClientGameStateManager.UpdateGameState(System.Int32,System.Collections.Generic.IEnumerable{whateverthefuck.src.model.GameEvent})">
            <summary>
            Updates the underlying GameState by handling the given events then stepping.
            </summary>
            <param name="tick">The servers tick counter.</param>
            <param name="events">The GameEvents to be handled.</param>
        </member>
        <member name="M:whateverthefuck.src.model.ClientGameStateManager.TakeControl(System.Int32)">
            <summary>
            Grants the player control of a GameEntity.
            </summary>
            <param name="identifier">The identifier of the GameEntity the player is to control.</param>
        </member>
        <member name="T:whateverthefuck.src.model.HeroMovementStruct">
            <summary>
            A container for the movement info of the Hero.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.entities.Block">
            <summary>
            Represents a basic block in the game.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.entities.Character">
            <summary>
            Represents a Character in the game.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.entities.Character.#ctor(whateverthefuck.src.model.EntityIdentifier,whateverthefuck.src.model.EntityType,whateverthefuck.src.model.CreationArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:whateverthefuck.src.model.entities.Character"/> class.
            </summary>
            <param name="identifier">The EntityIdentifier of the created Character.</param>
            <param name="entityType">The EntityType of the created Character.</param>
            <param name="args">The CreationArgs used to create the Character.</param>
        </member>
        <member name="T:whateverthefuck.src.model.entities.Door">
            <summary>
            Doors are like Blocks but you can run through them.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.entities.Floor">
            <summary>
            Represents a floor tile.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.CreationArgs.Value">
            <summary>
            Gets or sets the unencoded value of the CreationArgs.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.CreationArgs.FirstInt">
            <summary>
            Gets or sets the most significant int.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.CreationArgs.SecondInt">
            <summary>
            Gets or sets the least significant int.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.GameCoordinate">
            <summary>
            A class representing carthesian coordinate in game.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.GameCoordinate.Distance(whateverthefuck.src.model.GameCoordinate)">
            <summary>
            Calculates distance to another GameCoordinate.
            </summary>
            <param name="other">Coordinate to which the distance is to be calculated.</param>
            <returns>The distance between this GameCoordinate and the given GameCoordinate.</returns>
        </member>
        <member name="T:whateverthefuck.src.model.GameEntity">
            <summary>
            Represents an entity in the game.
            </summary>
        </member>
        <member name="E:whateverthefuck.src.model.GameEntity.OnDeath">
            <summary>
            Event for when the GameEntity dies.
            </summary>
        </member>
        <member name="E:whateverthefuck.src.model.GameEntity.OnStep">
            <summary>
            Event for when the GameEntity is stepped.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.CreationArgs">
            <summary>
            Gets the CreationArgs used to create the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.MovementCache">
            <summary>
            Gets or sets the last movement the GameEntity made.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Movable">
            <summary>
            Gets or sets a value indicating whether the GameEntity can move.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Collidable">
            <summary>
            Gets or sets a value indicating whether the GameEntity can be collided with.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Targetable">
            <summary>
            Gets or sets a value indicating whether the GameEntity can be targeted.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.BlocksLOS">
            <summary>
            Gets or sets a value indicating whether the GameEntity blocks line of sight.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Movements">
            <summary>
            Gets or sets current movement being made by the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.LastDamageTaken">
            <summary>
            Gets or sets the last DealDamageEvent to deal damage to the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Identifier">
            <summary>
            Gets or sets the EntityIdentifier which uniquely identifies a GameEntity in a GameState.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Left">
            <summary>
            Gets the X value of the left edge of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Right">
            <summary>
            Gets the X value of the right edge of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Bottom">
            <summary>
            Gets the Y value of the bottom edge of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Top">
            <summary>
            Gets the Y value of the top edge of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.Center">
            <summary>
            Gets or sets the GameCoordinate in the center of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.GameEntity.ShowHealth">
            <summary>
            Gets or sets a value indicating whether or not to show the health bar of the GameEntity.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.GameEntity.DrawMe(whateverthefuck.src.view.DrawAdapter)">
            <summary>
            The function used to draw the GameEntity.
            </summary>
            <param name="drawAdapter">The DrawAdapter used to draw the GameEntity.</param>
        </member>
        <member name="M:whateverthefuck.src.model.GameEntity.Step(whateverthefuck.src.model.GameState)">
            <summary>
            Steps the GameEntity advancing its state by one (1) tick.
            </summary>
            <param name="gameState">The GameState in which the GameEntity is ticked.</param>
        </member>
        <member name="M:whateverthefuck.src.model.GameEntity.DistanceTo(whateverthefuck.src.model.GameCoordinate)">
            <summary>
            Calculates the distance to another GameEntity.
            </summary>
            <param name="other">The GameEntity to which distance is to be calculated.</param>
            <returns>The distance to the other GameEntity.</returns>
        </member>
        <member name="M:whateverthefuck.src.model.GameEntity.Die(whateverthefuck.src.model.GameState)">
            <summary>
            This kills the GameEntity.
            </summary>
            <param name="gameState">Used to look up the GameEntity that killed this GameEntity.</param>
        </member>
        <member name="M:whateverthefuck.src.model.GameEntity.CalculateMovement(whateverthefuck.src.model.GameState)">
            <summary>
            Calculates the next movement to be made by the GameEntity.
            </summary>
            <param name="gameState">The GameState in which to calculate movement.</param>
            <returns>The Coordinate of the next movement to be made.</returns>
        </member>
        <member name="T:whateverthefuck.src.model.MovementStruct">
            <summary>
            Contains the movement info of a GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.MovementStruct.Direction">
            <summary>
            Gets or sets the direction of movement in radians, or NaN if not moving directionally.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.MovementStruct.FollowId">
            <summary>
            Gets or sets the id of the followed entity, or null if not following anything.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.MovementStruct.IsDirectional">
            <summary>
            Gets a value indicating whether the GameEntity is moving in a direction.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.MovementStruct.IsFollowing">
            <summary>
            Gets a value indicating whether the GameEntity is following another GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.MovementStruct.IsMoving">
            <summary>
            Gets a value indicating whether the GameEntity is moving at all.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.MovementStruct.Decode(System.Byte[])">
            <summary>
            Decodes an array of bytes into a MovementStruct.
            </summary>
            <param name="bs">The bytes to decode.</param>
            <returns>The decoded MovementStruct.</returns>
        </member>
        <member name="M:whateverthefuck.src.model.MovementStruct.Encode">
            <summary>
            Encodes a MovementStruct into a byte[].
            </summary>
            <returns>The bytes representing the MovementStruct.</returns>
        </member>
        <member name="T:whateverthefuck.src.model.EntityIdentifier">
            <summary>
            Uniquely identifies a GameEntity within a GameState.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.EntityIdentifier.Invalid">
            <summary>
            Gets an new invalid EntityIdentifier.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.EntityIdentifier.Id">
            <summary>
            Gets the Identifier of the GameEntity.
            </summary>
        </member>
        <member name="P:whateverthefuck.src.model.EntityIdentifier.IsValid">
            <summary>
            Gets a value indicating whether the EntityIdentifier is valid.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.model.EntityIdentifier.RandomReserved">
            <summary>
            Creates the next reserved EntityIdentifier.
            Will cause all hell to break loose if shipped over the network.
            </summary>
            <returns>The next reserved EntityIdentifier.</returns>
        </member>
        <member name="T:whateverthefuck.src.model.GameEvent">
            <summary>
            Represents an event which alters a GameState.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.EntityGenerator">
            <summary>
            Responsible for generating GameEntities from a given EntityType and CreationArgs.
            </summary>
        </member>
        <member name="T:whateverthefuck.src.model.IdentifierGenerator">
            <summary>
            Uniquely identifies a GameEntity within a GameState.
            </summary>
        </member>
        <member name="M:whateverthefuck.src.util.ImageLoader.GetBinding(whateverthefuck.src.util.SpriteID)">
            <summary>
            Gets the int Used by OpenGL to identify the texture bound from the given Images.
            </summary>
            <param name="spriteId">The SpriteID for which we are to look up the texture identifier.</param>
            <returns>The texture identifier generated by the GL context.</returns>
        </member>
        <member name="M:whateverthefuck.src.util.ImageLoader.CreateTexture(System.Drawing.Image)">
            <summary>
            Binds an Image in OpenGL.
            </summary>
            <param name="image">The image to be bound to a texture.</param>
            <returns>The integer Used by OpenGL to identify the created texture.</returns>
        </member>
        <member name="M:whateverthefuck.src.util.JsonIO.WriteToJsonFile``1(System.String,``0,System.Boolean)">
            <summary>
            Writes the given object instance to a Json file.
            <para>Object type must have a parameterless constructor.</para>
            <para>Only Public properties and variables will be written to the file. These can be any type though, even other classes.</para>
            <para>If there are public properties/variables that you do not want written to the file, decorate them with the [JsonIgnore] attribute.</para>
            </summary>
            <typeparam name="T">The type of object being written to the file.</typeparam>
            <param name="filePath">The file path to write the object instance to.</param>
            <param name="objectToWrite">The object instance to write to the file.</param>
            <param name="append">If false the file will be overwritten if it already exists. If true the contents will be appended to the file.</param>
        </member>
        <member name="M:whateverthefuck.src.util.JsonIO.ReadFromJsonFile``1(System.String)">
            <summary>
            Reads an object instance from an Json file.
            <para>Object type must have a parameterless constructor.</para>
            </summary>
            <typeparam name="T">The type of object to read from the file.</typeparam>
            <param name="filePath">The file path to read the object instance from.</param>
            <returns>Returns a new instance of the object read from the Json file.</returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.RandomPointWithinCircle(whateverthefuck.src.view.GLCoordinate)">
            <summary>
            Return a random point within radius.
            </summary>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.RandomPointWithinCircleRelativeToLocation(whateverthefuck.src.model.GameCoordinate,whateverthefuck.src.view.GLCoordinate)">
            <summary>
            Returns a random point within a circle around a given location.
            </summary>
            <param name="location"></param>
            <param name="circleRadius"></param>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.XTimesInY(System.Int32,System.Int32)">
            <summary>
            Returns true x out of y times.
            For example x = 5, y = 100 would return true 5 in 100 times.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.IntegerBetween(System.Int32,System.Int32)">
            <summary>
            Returns an integer between a(including) and b(excluding).
            </summary>
            <param name="a">min</param>
            <param name="b">max</param>
            <returns> a &lt;= n &lt; b</returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.BetweenZeroAndOne">
            <summary>
            Returns a float between [0, 1)
            </summary>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.NegativeOrPositiveOne">
            <summary>
            Returns either -1 or 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.RandomLocationWithinSquare(whateverthefuck.src.model.GameCoordinate,whateverthefuck.src.model.GameCoordinate)">
            <summary>
            Returns a random location within a square defined from two points.
            For now unexpected stuff can happen if terminus is bigger than origin.
            </summary>
            <param name="origin"></param>
            <param name="terminus"></param>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.util.RNG.RandomElement``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns a random element in the provided list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:whateverthefuck.src.view.GUI.CreateGameWindow">
            <summary>
            Creates a GibbWindow on a new thread and wait for the OnLoad event
            of said window to be called. Roughly speaking.
            </summary>
        </member>
    </members>
</doc>
