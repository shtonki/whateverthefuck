namespace whateverthefuck.src.util
{
    using System.Collections.Generic;
    using System.Drawing;
    using whateverthefuck.src.view;

    public enum SpriteID
    {
        testSprite1,
    }

    public static class ImageLoader
    {
        private static Dictionary<SpriteID, int> glIDs = new Dictionary<SpriteID, int>();
        private static Dictionary<SpriteID, Image> images = new Dictionary<SpriteID, Image>();

        public static void Init()
        {
            images[SpriteID.testSprite1] = new Bitmap(Properties.Resources.kappa);

            foreach (var img in images)
            {
                GetBinding(img.Key);
            }
        }

        public static Image GetImage(SpriteID id)
        {
            if (images.ContainsKey(id))
            {
                return images[id];
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the int Used by OpenGL to identify the texture bound from the given Images.
        /// </summary>
        /// <param name="spriteId">The SpriteID for which we are to look up the texture identifier.</param>
        /// <returns>The texture identifier generated by the GL context.</returns>
        public static int GetBinding(SpriteID spriteId)
        {
            if (glIDs.ContainsKey(spriteId))
            {
                return glIDs[spriteId];
            }

            var loaded = DrawAdapter.CreateTexture(images[spriteId]);
            glIDs[spriteId] = loaded;
            return loaded;
        }
    }
}